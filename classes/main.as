package {	import flash.display.MovieClip;	import flash.display.DisplayObject;	import flash.display.Stage;	import flash.display.SimpleButton;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.ui.Keyboard;	import flash.media.SoundChannel;	public class main extends MovieClip {		//object definition		var player:Player;		var city:City;		var space:Space;		var distance:Score;		var landing:Landing;		var obsticleArray:Array;		var birdArray:Array;		var bird:Bird;		var chopperArray:Array;		var blimp:Blimp;		var speed:Score;		var splat:Splat;		var splode:Splode;		var titleScreen:TitleScreen;		var winAnimation:Dance;		var floom:Floom;				//buttons		var replayButtonEasy:ReplayButtonEasy;		var replayButtonMedium:ReplayButtonMedium;		var replayButtonHard:ReplayButtonHard;		var buttonExtreme:ButtonExtreme;		var buttonMute:ButtonMute;						//sound variables		var titleMusic:TitleMusic;		var gameTrack:GameTrack;		var hitBird:HitBird;		var hitBlimp:HitBlimp;		var splatDead:SplatDead;		var wind:Wind;		var titleMusicChannel:SoundChannel;		var gameMusicChannel:SoundChannel;		var hitBirdChannel:SoundChannel;		var hitBlimpChannel:SoundChannel;		var splatDeadChannel:SoundChannel;		var windChannel:SoundChannel;		var muted:Number = 1;				//game variables		var hvel:Number = 0;		var vvel:Number = 0;		var vaccel:Number = 0;		var haccel:Number = 0;		var vdrag:Number = 0;		var hdrag:Number = 0;		var fric:Number = 0;		var moveLeft:Boolean = false;		var moveRight:Boolean = false;		var moveUp:Boolean = false;		var moveDown:Boolean = false;		var dead:Boolean = false;		var isDancing = false;		var collected:Number = 1;		//difficulty		var frequency:Number = 200; // higher = less objects		var impact:Number = 2; // higher = slow down more after hitting an obsticle		var mapHeight:Number = 60000;		var grav:Number = 0.075;		var playerStart = 0; //starting height of le player; 0 is equal to mapHeight		var extreme:Boolean = false;		var canExtreme:Boolean = false;		public function main():void {			titleScreen = new TitleScreen;						replayButtonEasy = new ReplayButtonEasy;			replayButtonMedium = new ReplayButtonMedium;			replayButtonHard = new ReplayButtonHard;			buttonExtreme = new ButtonExtreme;			buttonMute = new ButtonMute;						city=new City();			addChild(city);			space = new Space;			addChild(space);			space.x = stage.stageWidth;			addChild(titleScreen);			titleScreen.buttonEasy.addEventListener(MouseEvent.MOUSE_UP,makeLevelEasy);			titleScreen.buttonMedium.addEventListener(MouseEvent.MOUSE_UP,makeLevelMedium);			titleScreen.buttonHard.addEventListener(MouseEvent.MOUSE_UP,makeLevelHard);			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyIsPressed);			stage.addEventListener(KeyboardEvent.KEY_UP, keyIsReleased);									replayButtonEasy.addEventListener(MouseEvent.MOUSE_UP,resetLevelEasy);			replayButtonMedium.addEventListener(MouseEvent.MOUSE_UP,resetLevelMedium);			replayButtonHard.addEventListener(MouseEvent.MOUSE_UP,resetLevelHard);			buttonMute.addEventListener(MouseEvent.MOUSE_UP,muteMusic);			buttonExtreme.addEventListener(MouseEvent.MOUSE_UP,resetLevelExtreme);									titleMusic = new TitleMusic();			gameTrack = new GameTrack();			hitBird = new HitBird();			hitBlimp = new HitBlimp();			splatDead = new SplatDead();			wind = new Wind();						winAnimation = new Dance;									titleMusicChannel = titleMusic.play();						player=new Player();			obsticleArray = new Array();			birdArray = new Array();			chopperArray = new Array();			landing = new Landing;			blimp = new Blimp;			distance = new Score;			speed = new Score;						addChild(buttonMute);			buttonMute.x = stage.stageWidth-buttonMute.width;			buttonMute.y = stage.stageHeight-buttonMute.height;								} //end main		public function makeLevelEasy(mouseEvent:MouseEvent):void {			impact = 2.2;			grav = .045;			playerStart = 50000;			makeLevel();		}		public function makeLevelMedium(mouseEvent:MouseEvent):void {			impact = 2.1;			grav = .060;			playerStart = 40000;			makeLevel();		}		public function makeLevelHard(mouseEvent:MouseEvent):void {			impact = 2;			grav = .075;			playerStart = 30000;			makeLevel();		}		public function makeLevel():void {			stage.addEventListener(Event.ENTER_FRAME, movement);						titleScreen.y = stage.stageHeight;			titleScreen.x = stage.stageWidth			if (titleMusicChannel){				titleMusicChannel.stop();			} else {				titleMusicChannel = titleMusic.play();				titleMusicChannel.stop();			}			if(muted == 1) { //not muted				gameMusicChannel = gameTrack.play();				gameMusicChannel.addEventListener(Event.SOUND_COMPLETE, onBackgroundMusicFinished);			} else {				gameMusicChannel = gameTrack.play();				gameMusicChannel.stop();			}								for (var i:Number = Math.random()*15000+900;i<mapHeight;i+=Math.random()*frequency*10+frequency*10) { //BALLOONS				var obsticle = new Obsticle(Math.random()*(stage.stageWidth-30)+30,i-playerStart);				obsticleArray.push(obsticle);				addChild(obsticle);			}						for (var j:Number = 400;j<mapHeight;j+=Math.random()*frequency+frequency) { //BIRDS				bird = new Bird(Math.random()*(stage.stageWidth-30)+30,j-playerStart);				birdArray.push(bird);				addChild(bird);			}						for (var k:Number = 2000;k<mapHeight;k+=Math.random()*frequency*9+frequency*9) { //HELICOPTERS				var chopper = new Chopper(Math.random()*(stage.stageWidth-30)+30,k-playerStart);				chopperArray.push(chopper);				addChild(chopper);			}						addChild(landing);			landing.x = stage.stageWidth/2;			landing.y = mapHeight-playerStart;						addChild(blimp);			blimp.x = Math.random()*stage.stageWidth;			blimp.y = Math.random()*((mapHeight-playerStart)/2)+((mapHeight-playerStart)/2)			addChild(player);			player.y = 50;			player.x = stage.stageWidth/2;						addChild(distance);			distance.y= 0;			distance.x=stage.stageWidth;			distance.makeText("  Altimeter:");						addChild(speed);			speed.y=0;			speed.x=speed.width;			speed.makeText("Speedometer:");						replayButtonEasy.y = 550;			replayButtonEasy.x = 100;			replayButtonMedium.y = 550;			replayButtonMedium.x = 200;			replayButtonHard.y = 550;			replayButtonHard.x = 300;			buttonExtreme.y = 650;			buttonExtreme.x = 200								}//end makeLevel		public function keyIsPressed(event:KeyboardEvent):void {			if (event.keyCode==Keyboard.LEFT) {				moveLeft = true;				player.scaleX = 1;			}			if (event.keyCode==Keyboard.RIGHT) {				moveRight = true;				player.scaleX = -1;			}			if (event.keyCode==Keyboard.UP) {				moveUp = true;			}			if (event.keyCode==Keyboard.DOWN) {				moveDown = true;			}		} //end keyIsPressed		public function keyIsReleased(event:KeyboardEvent):void {			if (event.keyCode==Keyboard.LEFT) {				moveLeft = false;			}			if (event.keyCode==Keyboard.RIGHT) {				moveRight = false;			}			if (event.keyCode==Keyboard.UP) {				moveUp = false;			}			if (event.keyCode==Keyboard.DOWN) {				moveDown = false;			}		} //end keyIsReleased		public function onClickPlay(event:MouseEvent) {					}				public function movement(event:Event):void {						//physics			if (!extreme) {				vdrag = -0.000004*Math.pow(vvel+collected*2,3);			} else {				vdrag = 0;			}			hdrag = -0.0008*Math.pow(hvel,3);			if(!dead) {				vaccel = grav+vdrag;			}			//haccel = hdrag+fric;			vvel += vaccel;			hvel += haccel;						//background movement			if (landing.y > 400) {				city.y-= vvel*.05;				space.y-= vvel*.05				landing.y-= vvel;				blimp.y -= vvel;			} else {				player.y += vvel;			}						if (player.hitTestObject(landing)) {  //LANDING				player.alpha = 0;				if (vvel > 10) {					if (!dead) {						splat = new Splat;						splatDeadChannel = splatDead.play();						addChild(splat);						splat.x = player.x						splat.y = player.y+10					}				} else {					if (!dead) {						addChild(winAnimation);						winAnimation.x = player.x;						winAnimation.y = player.y;												isDancing = true;												if (grav == 0.075) {							canExtreme = true;						}											}				}								vvel = 0;				vaccel = 0;								gameMusicChannel.stop();				if (!dead) {										addChild(replayButtonEasy);					addChild(replayButtonMedium);					addChild(replayButtonHard);					if (canExtreme) {						buttonExtreme.y = 650;						buttonExtreme.x = 200;						addChild(buttonExtreme);					}									if(!canExtreme) {						buttonExtreme.x = stage.stageWidth+200;					}				}				dead = true;			}						if (player.hitTestObject(blimp) && player.y < blimp.y) {				vvel = -3;				hitBlimpChannel = hitBlimp.play();			}						for each ( var obsticle:Obsticle in obsticleArray )  {  //BALOONS				if(!obsticle.beenHit) {					if (landing.y > 400) {						obsticle.y -= vvel;					}					if (dead) {						obsticle.alpha = 0;					}					if(player.hitTestObject(obsticle)) {						obsticle.beenHit = true;						collected += Math.pow((impact/2),3);						obsticle.y = player.y;						obsticle.x = player.x;						obsticle.rotation += Math.random()*50-25					}				}else {					obsticle.y = player.y;					obsticle.x = player.x;					if (dead) {						obsticle.alpha = 0;					}				}			}						for each ( var bird:Bird in birdArray )  {  //BIRDS				if (landing.y > 400) {					bird.y -= vvel;				}				if (bird.dir == 1) {					bird.x +=bird.hvel;					bird.scaleX = -1;				} else {					bird.x -=bird.hvel;					bird.scaleX = 1;				}				if (bird.x > stage.stageWidth) {					bird.dir = 0;				}				if (bird.x < 0) {					bird.dir = 1;				}				if (player.hitTestObject(bird)) {					//bird.alpha = 0;					if (contains(bird)) {						removeChild(bird);					}					if (!bird.beenHit && vvel>0) {						vvel -= Math.log(vvel)*impact;						hitBirdChannel = hitBird.play();						floom = new Floom;						addChild(floom);						floom.y = bird.y;						floom.x = bird.x;						//floom.addEventListener(Event.FLOOM_END, destroy);					}					bird.beenHit = true;				}			}						for each ( var chopper:Chopper in chopperArray )  {  //CHOPPERS							if(extreme) {					if (chopper.dir == 1) {						chopper.x +=chopper.hvel;						chopper.scaleX = -1;					} else {						chopper.x -=bird.hvel;						chopper.scaleX = 1;					}					if (chopper.x > stage.stageWidth) {						chopper.dir = 0;					}					if (chopper.x < 0) {						chopper.dir = 1;					}				}							if(!chopper.beenHit) {					if (landing.y > 400) {						chopper.y -= vvel;					}					if(player.hitTestObject(chopper) && player.y < chopper.y && player.x > chopper.x-chopper.width/2 && player.x < chopper.x+chopper.width/2) {						player.alpha = 0;						if (!dead) {							gameMusicChannel.stop();							splatDeadChannel = splatDead.play();							splode = new Splode;							addChild(splode);							splode.x = player.x							splode.y = player.y+15														if (!dead) {																addChild(replayButtonEasy);								addChild(replayButtonMedium);								addChild(replayButtonHard);								if (canExtreme) {									addChild(buttonExtreme);								}							}						}						dead = true;						vvel = 0;						vaccel = 0;					}				}			}						//player movement				//x			if (player.x < 20) {				hvel = Math.abs(hvel)*.5;			}			if (player.x > stage.stageWidth-20) {				hvel = Math.abs(hvel)*-.5;			}			player.x += hvel;			if (moveLeft) {				haccel = -.2+hdrag+fric;			} else if (moveRight) {				haccel = .2+hdrag+fric;			} else {				haccel = 0;			}				//y			if (moveUp && grav != 0 && player.y>20) {				player.y -= 2;			}			if (moveDown && grav != 0 && player.y<stage.stageHeight) {				player.y += 2;			}			//text			distance.makeValue((landing.y-player.y-player.height/2)*0.0331);			speed.makeValue(vvel*1.9867);			if (vvel > 10) {				speed.warning = true;			} else {				speed.warning = false;			}			if (landing.y-player.y-player.height/2 < 100/ 0.0331) {				distance.warning = true;			} else {				distance.warning = false;			}						//traces				//trace ("haccel"+haccel);				//trace ("hvel"+hvel);				//trace ("vvel "+vvel);				//trace ("player.y" + player.y);				//trace ("mapheight" + mapHeight);				//trace (extreme);				//trace(vdrag);		} // end movement		public function resetLevelEasy(mouseEvent:MouseEvent):void {			impact = 2.2;			grav = .045;			playerStart = 50000;			extreme = false;			resetLevel();		}		public function resetLevelMedium(mouseEvent:MouseEvent):void {			impact = 2.1;			grav = .060;			playerStart = 40000;			extreme = false;			resetLevel()		}		public function resetLevelHard(mouseEvent:MouseEvent):void {			impact = 2;			grav = .075;			playerStart = 30000;			extreme = false;			resetLevel();		}		public function resetLevelExtreme(mouseEvent:MouseEvent):void {			impact = 2;			grav = .075;			playerStart = 0;			extreme = true;			canExtreme = true;			resetLevel();		}				public function resetLevel():void {			vvel = 0;			hvel = 0;			stage.focus = stage;						if(contains(replayButtonEasy)) {				removeChild(replayButtonEasy);				removeChild(replayButtonMedium);				removeChild(replayButtonHard);			}			if(contains(buttonExtreme)) {				removeChild(buttonExtreme);			}						player.alpha = 1;			player.y = 50;			player.x = stage.stageWidth/2;			dead = false;			collected = 1;			if(splat) {				removeChild(splat);			}			if(splode) {				removeChild(splode);			}			if(contains(winAnimation)){				removeChild(winAnimation);			}						isDancing = false;			if(muted ==1) {				gameMusicChannel = gameTrack.play();			}			gameMusicChannel.addEventListener(Event.SOUND_COMPLETE, onBackgroundMusicFinished);			for each (var obsticle in obsticleArray )  { //BALLOONS				obsticle.rotation = 0;				if (!extreme) {					obsticle.alpha = 1;				} else {					obsticle.alpha = 1;				}				obsticle.y = obsticle.resetY;				obsticle.x = obsticle.resetX;				obsticle.beenHit = false;				obsticle.x = Math.random()*stage.stageWidth;			}			for each ( var bird:Bird in birdArray )  {  //BIRDS				bird.y += mapHeight-landing.y-playerStart;				bird.beenHit = false;				addChild(bird);			}			for each ( var chopper:Chopper in chopperArray )  {  //CHOPPERS				chopper.y += mapHeight-landing.y-playerStart;				chopper.x = Math.random()*stage.stageWidth;			}			if (!extreme) {				city.y = 0;				space.y = 1500;				space.x = stage.stageWidth;			} else {				city.y = 1500;				space.y = 0;				space.x = 0;			}			landing.y += mapHeight-landing.y-playerStart; //LANDING			blimp.x = Math.random()*stage.stageWidth;			blimp.y = Math.random()*((mapHeight-playerStart)/2)+((mapHeight-playerStart)/2)		} //end function resetLevel			public function onBackgroundMusicFinished (event:Event):void {			gameMusicChannel = gameTrack.play();			gameMusicChannel.addEventListener(Event.SOUND_COMPLETE, onBackgroundMusicFinished);		}		public function muteMusic (mouseEvent:MouseEvent): void {			if(muted == 1) {				if(gameMusicChannel) {					gameMusicChannel.stop();				}				if(titleMusicChannel) {					titleMusicChannel.stop();				}			} else if(gameMusicChannel) {					gameMusicChannel = gameTrack.play();					gameMusicChannel.addEventListener(Event.SOUND_COMPLETE, onBackgroundMusicFinished);			}else if (titleMusicChannel) {					titleMusicChannel = titleMusic.play();			}			muted *= -1;		} 		//public function destroy (e:Event):void {			//removeChild(floom);		//}	}//end class main} //end package